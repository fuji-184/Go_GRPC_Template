// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: proto/hello.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Hello_Menyapa_FullMethodName          = "/hello.Hello/Menyapa"
	Hello_MenyapaStreaming_FullMethodName = "/hello.Hello/MenyapaStreaming"
)

// HelloClient is the client API for Hello service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelloClient interface {
	Menyapa(ctx context.Context, in *Isi, opts ...grpc.CallOption) (*Hasil, error)
	// server streaming rpc
	MenyapaStreaming(ctx context.Context, in *Isi, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Hasil], error)
}

type helloClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloClient(cc grpc.ClientConnInterface) HelloClient {
	return &helloClient{cc}
}

func (c *helloClient) Menyapa(ctx context.Context, in *Isi, opts ...grpc.CallOption) (*Hasil, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Hasil)
	err := c.cc.Invoke(ctx, Hello_Menyapa_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloClient) MenyapaStreaming(ctx context.Context, in *Isi, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Hasil], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Hello_ServiceDesc.Streams[0], Hello_MenyapaStreaming_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Isi, Hasil]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Hello_MenyapaStreamingClient = grpc.ServerStreamingClient[Hasil]

// HelloServer is the server API for Hello service.
// All implementations must embed UnimplementedHelloServer
// for forward compatibility.
type HelloServer interface {
	Menyapa(context.Context, *Isi) (*Hasil, error)
	// server streaming rpc
	MenyapaStreaming(*Isi, grpc.ServerStreamingServer[Hasil]) error
	mustEmbedUnimplementedHelloServer()
}

// UnimplementedHelloServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHelloServer struct{}

func (UnimplementedHelloServer) Menyapa(context.Context, *Isi) (*Hasil, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Menyapa not implemented")
}
func (UnimplementedHelloServer) MenyapaStreaming(*Isi, grpc.ServerStreamingServer[Hasil]) error {
	return status.Errorf(codes.Unimplemented, "method MenyapaStreaming not implemented")
}
func (UnimplementedHelloServer) mustEmbedUnimplementedHelloServer() {}
func (UnimplementedHelloServer) testEmbeddedByValue()               {}

// UnsafeHelloServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelloServer will
// result in compilation errors.
type UnsafeHelloServer interface {
	mustEmbedUnimplementedHelloServer()
}

func RegisterHelloServer(s grpc.ServiceRegistrar, srv HelloServer) {
	// If the following call pancis, it indicates UnimplementedHelloServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Hello_ServiceDesc, srv)
}

func _Hello_Menyapa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Isi)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServer).Menyapa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hello_Menyapa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServer).Menyapa(ctx, req.(*Isi))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hello_MenyapaStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Isi)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HelloServer).MenyapaStreaming(m, &grpc.GenericServerStream[Isi, Hasil]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Hello_MenyapaStreamingServer = grpc.ServerStreamingServer[Hasil]

// Hello_ServiceDesc is the grpc.ServiceDesc for Hello service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Hello_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hello.Hello",
	HandlerType: (*HelloServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Menyapa",
			Handler:    _Hello_Menyapa_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MenyapaStreaming",
			Handler:       _Hello_MenyapaStreaming_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/hello.proto",
}

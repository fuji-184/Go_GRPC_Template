// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: musik/musik.proto

package musik

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Musik_InfoLagu_FullMethodName = "/musik.Musik/InfoLagu"
)

// MusikClient is the client API for Musik service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MusikClient interface {
	InfoLagu(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Lagu, error)
}

type musikClient struct {
	cc grpc.ClientConnInterface
}

func NewMusikClient(cc grpc.ClientConnInterface) MusikClient {
	return &musikClient{cc}
}

func (c *musikClient) InfoLagu(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Lagu, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Lagu)
	err := c.cc.Invoke(ctx, Musik_InfoLagu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MusikServer is the server API for Musik service.
// All implementations must embed UnimplementedMusikServer
// for forward compatibility.
type MusikServer interface {
	InfoLagu(context.Context, *emptypb.Empty) (*Lagu, error)
	mustEmbedUnimplementedMusikServer()
}

// UnimplementedMusikServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMusikServer struct{}

func (UnimplementedMusikServer) InfoLagu(context.Context, *emptypb.Empty) (*Lagu, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InfoLagu not implemented")
}
func (UnimplementedMusikServer) mustEmbedUnimplementedMusikServer() {}
func (UnimplementedMusikServer) testEmbeddedByValue()               {}

// UnsafeMusikServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MusikServer will
// result in compilation errors.
type UnsafeMusikServer interface {
	mustEmbedUnimplementedMusikServer()
}

func RegisterMusikServer(s grpc.ServiceRegistrar, srv MusikServer) {
	// If the following call pancis, it indicates UnimplementedMusikServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Musik_ServiceDesc, srv)
}

func _Musik_InfoLagu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusikServer).InfoLagu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Musik_InfoLagu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusikServer).InfoLagu(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Musik_ServiceDesc is the grpc.ServiceDesc for Musik service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Musik_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "musik.Musik",
	HandlerType: (*MusikServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InfoLagu",
			Handler:    _Musik_InfoLagu_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "musik/musik.proto",
}
